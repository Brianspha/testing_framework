name: Incremental Docker Foundry Build

on:
  push:
    paths:
      - 'repos.txt'
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  process-all:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        run: |
          git clone https://github.com/${{ github.repository }}.git .
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'

      - name: Setup Docker Buildx
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap

      - name: Create Base Dockerfile
        run: |
          cat > Dockerfile.base << 'EOF'
          FROM rust:latest AS builder

          RUN rustup target add x86_64-unknown-linux-gnu && \
              rustup default nightly && \
              rustup component add rust-src

          RUN apt-get update && apt-get install -y \
              build-essential \
              cmake \
              ninja-build \
              python3 \
              zlib1g-dev \
              libncurses-dev \
              git \
              curl \
              clang \
              lld \
              nodejs \
              npm \
              && rm -rf /var/lib/apt/lists/*

          WORKDIR /workspace

          RUN git clone https://github.com/paritytech/revive.git
          WORKDIR /workspace/revive

          RUN make install-llvm && \
              export LLVM_SYS_181_PREFIX=${PWD}/target-llvm/gnu/target-final

          ENV LLVM_SYS_181_PREFIX={PWD}/target-llvm/gnu/target-final
          ENV PATH="${LLVM_SYS_181_PREFIX}/bin:${PATH}"

          WORKDIR /workspace

          RUN git clone -b resolc-compiler https://github.com/Brianspha/foundry-revive.git foundry && \
              cd foundry && \
              LLVM_SYS_181_PREFIX=/workspace/revive/target-llvm/gnu/target-final \
              RUSTFLAGS="-C target-feature=+crt-static" \
              cargo +nightly build --release -vv --target x86_64-unknown-linux-gnu && \
              ls -la target/x86_64-unknown-linux-gnu/release/forge

          FROM debian:bullseye-slim

          RUN apt-get update && apt-get install -y \
              git \
              nodejs \
              npm \
              && rm -rf /var/lib/apt/lists/*

          COPY --from=builder /workspace/foundry/target/x86_64-unknown-linux-gnu/release/forge /usr/local/bin/
          COPY --from=builder /workspace/revive/target-llvm/gnu/target-final /usr/local/llvm

          ENV LLVM_SYS_181_PREFIX=/usr/local/llvm
          ENV PATH="/usr/local/llvm/bin:${PATH}"

          WORKDIR /workspace/project
          EOF

      - name: Build Base Image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --load \
            --progress=plain \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -f Dockerfile.base \
            -t foundry-base:latest .

      - name: Create build script
        run: |
          cat > build.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail

          mkdir -p /workspace/output
          exec 2>&1 | tee /workspace/output/build.log

          if [ -f "package.json" ]; then
            npm ci --no-audit --no-fund || {
              echo "failed" > /workspace/output/status.txt
              exit 1
            }
          fi

          if [ ! -d "lib/forge-std" ]; then
            forge install foundry-rs/forge-std --no-commit
          fi

          RUST_LOG=trace forge install --no-commit
          
          RUST_LOG=trace forge build --resolc-compile

          if [ -d "out" ]; then
            cp -r out /workspace/output/
            echo "success" > /workspace/output/status.txt
          else
            echo "failed" > /workspace/output/status.txt
            exit 1
          fi
          EOF

          chmod +x build.sh

      - name: Process Repositories
        run: |
          while IFS= read -r repo_url || [ -n "$repo_url" ]; do
            [ -z "$repo_url" ] && continue
            
            repo_name=$(basename "$repo_url" .git | tr '[:upper:]' '[:lower:]')

            mkdir -p "build/$repo_name"
            git clone --depth 1 --verbose "$repo_url" "temp-$repo_name" 2>&1 | tee "build/$repo_name/clone.log"
            mkdir -p "temp-output"
            
            docker run --rm \
              -v "$(pwd)/temp-$repo_name:/workspace/project" \
              -v "$(pwd)/build.sh:/workspace/build.sh" \
              -v "$(pwd)/temp-output:/workspace/output" \
              foundry-base:latest \
              bash -c "/workspace/build.sh"
            
            if [ -d "temp-output/out" ]; then
              mv temp-output/out "build/$repo_name/"
            fi
            
            cp "temp-output/build.log" "build/$repo_name/trace.log" 2>/dev/null || true
            cp temp-output/status.txt "build/$repo_name/" 2>/dev/null || echo "failed" > "build/$repo_name/status.txt"
            
            rm -rf "temp-$repo_name" "temp-output"
            
            mkdir -p build
            echo "# Build Summary for ${repo_name}" > "build/$repo_name/summary.md"
            echo "Generated at: $(date)" >> "build/$repo_name/summary.md"
            echo "" >> "build/$repo_name/summary.md"
            
            if [ -f "build/$repo_name/status.txt" ]; then
              status=$(cat "build/$repo_name/status.txt")
              echo "Status: $status" >> "build/$repo_name/summary.md"
            else
              echo "Status: unknown" >> "build/$repo_name/summary.md"
            fi
            
            if [ -f "build/$repo_name/build.log" ]; then
              echo "### Last Build Log" >> "build/$repo_name/summary.md"
              echo '```' >> "build/$repo_name/summary.md"
              tail -n 20 "build/$repo_name/build.log" >> "build/$repo_name/summary.md"
              echo '```' >> "build/$repo_name/summary.md"
            fi

            git add "build/$repo_name"
            git commit -m "update: ${repo_name} built results" || echo "No changes to commit"
            git push origin HEAD || {
              git pull --rebase
              git push origin HEAD
            }
          done < repos.txt